<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CTry</title>
  
  <subtitle>没有比脚更长的路，走过去！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ccttry.github.io/"/>
  <updated>2018-10-15T07:34:17.554Z</updated>
  <id>https://ccttry.github.io/</id>
  
  <author>
    <name>Mr CTry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux系统启动过程</title>
    <link href="https://ccttry.github.io/2018/10/15/Linux%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <id>https://ccttry.github.io/2018/10/15/Linux系统启动过程/</id>
    <published>2018-10-15T03:58:54.000Z</published>
    <updated>2018-10-15T07:34:17.554Z</updated>
    
    <content type="html"><![CDATA[<p>&ensp;&ensp;&ensp;&ensp;Linux系统的启动过程大概可以分成以以下五个阶段：（本文章以CentOS 7之前的版本为例讲解，CentOS 7开始之后的版本使用systemd来代替centos6以前的init程序，详细区别可见<a href="https://blog.csdn.net/qq_27754983/article/details/75212666" target="_blank" rel="noopener">CentOS 6 和 CentOS 7 系统启动对比</a> )</p><ol><li>内核引导</li><li>运行init</li><li>系统初始化</li><li>建立终端</li><li>用户登录系统<a id="more"></a><h2 id="内核引导"><a href="#内核引导" class="headerlink" title="内核引导"></a>内核引导</h2></li></ol><p><img src="/2018/10/15/Linux系统启动过程/img1.jpg" alt=""></p><p>当计算打开电源按钮之后，</p><ul><li>第一步：BIOS开机自检（POST Power On Self Test ）。</li><li>第二步：BIOS在完成硬件检测和资源分配后，将硬盘中的引导程序读到系统内存中然后将控制权交给引导程序。</li><li>第三步：执行引导程序，引导程序的主要任务是将内核从硬盘上读到内存中,然后跳转到内核的入口点去运行，GRUB就将控制权交接给了Kernel程序。</li><li>第四步：内核挂载根文件系统，装载第一个进程，执行init程序。</li></ul><h4 id="第一、二步："><a href="#第一、二步：" class="headerlink" title="第一、二步："></a>第一、二步：</h4><p>&ensp;&ensp;&ensp;&ensp;详细一点说，当我们按下电源按钮之后，第一步开始BIOS开机自检（POST Power On Self Test ）。BIOS是一个基本输入输出系统，该系统存储于主板的ROM芯片上，计算机在开机时，会最先读取该系统，然后会有一个加电自检过程，这个过程其实就是检查CPU和内存，计算机最基本的组成单元(控制器、运算器和存储器)，还会检查其他硬件，若没有异常就开始加载BIOS程序到内存当中。BIOS的主要功能就是确认硬件基本功能正常，然后产生一个INT13中断。这个中断指向引导记录（MBR）所在的引导扇区，查找引导记录，一旦BootLoader程序被检测并加载到内存中，BIOS就将控制权交给了BootLoader程序。</p><h5 id="这里补充一下几个概念MBR、GRUB、Kernel（内核）。"><a href="#这里补充一下几个概念MBR、GRUB、Kernel（内核）。" class="headerlink" title="这里补充一下几个概念MBR、GRUB、Kernel（内核）。"></a>这里补充一下几个概念MBR、GRUB、Kernel（内核）。</h5><p><strong>MBR：Master Boot Record，主引导记录</strong>。存储于磁盘的头部，我们将存储引导MBR 引导代码的扇区称作主引导扇区。这个扇区作为管理磁盘空间的一个特殊空间，不属于磁盘上的任何分区，这个空间由3个组成部分。</p><ul><li>主引导程序即主引导记录（MBR）（占446个字节）。可在FDISK程序中找到，它用于硬盘启动时将系统控制转给用户指定的并在分区表中登记了的某个操作系统。（就是用于存储BootLoader程序）</li><li>磁盘分区表项（DPT，Disk Partition Table)。由四个分区表项构成（每个16个字节）。负责说明磁盘上的分区情况。<ul><li>结束标志（占2个字节）。存储时低位在前，高位在后。用于MBR的有效性检查。</li></ul></li></ul><p><strong>GRUB：Grand Unified BootLoader，多操作系统启动程序</strong>。 用于计算机查找操作系统内核，并加载到内存的智能程序。</p><h5 id="第三步：（包含在Stage2中）"><a href="#第三步：（包含在Stage2中）" class="headerlink" title="第三步：（包含在Stage2中）"></a>第三步：（包含在Stage2中）</h5><p>其执行过程可以分成三个步骤：</p><ul><li>Stage1：这个其实就是MBR，它的主要工作就是查找并加载第二段Bootloader程序(stage2)，但系统在没启动时，MBR根本找不到文件系统，也就找不到stage2所存放的位置，因此，就有了Stage1_5。</li><li>Stage1_5：该步骤就是为了识别文件系统。系统会加载一个存放在分区外的镜像文件initrd。该文件在系统引导过程中挂载的一个临时根文件系统，用来支持两阶段的引导过程。initrd文件中包含了各种可执行程序和驱动程序，它们可以用来挂载实际的根文件系统，然后再将这个 initrd RAM磁盘卸载，并释放内存。</li><li>Stage2：该步骤就是为了加载内核挂载文件系统。GRUB程序会根据/boot/grub/grub.conf文件查找Kernel的信息，然后开始加载Kernel程序，当Kernel程序被检测并在加载到内存中，GRUB就将控制权交接给了Kernel程序。</li></ul><p><strong>Kernel</strong><br>&ensp;&ensp;&ensp;&ensp;Kernel，内核，Kernel是Linux系统最主要的程序，实际上，Kernel的文件很小，只保留了最基本的模块，并以压缩的文件形式存储在硬盘中，当GRUB将Kernel读进内存，内存开始解压缩内核文件。讲内核启动，应该先讲下initrd这个文件，<br>&ensp;&ensp;&ensp;&ensp;initrd(Initial RAM Disk)，它在stage2这个步骤就被拷贝到了内存中，这个文件是在安装系统时产生的，是一个临时的根文件系统(rootfs)。因为Kernel为了精简，只保留了最基本的模块，因此，Kernel上并没有各种硬件的驱动程序，也就无法识rootfs所在的设备，故产生了initrd这个文件，该文件装载了必要的驱动模块，当Kernel启动时，可以从initrd文件中装载驱动模块，直到挂载真正的rootfs，然后将initrd从内存中移除。</p><h5 id="第四步："><a href="#第四步：" class="headerlink" title="第四步：　　"></a>第四步：　　</h5><p>&ensp;&ensp;&ensp;&ensp;Kernel会以只读方式挂载根文件系统，当根文件系统被挂载后，开始装载第一个进程(用户空间的进程)，执行/sbin/init，之后就将控制权交接给了init程序。</p><h2 id="运行init"><a href="#运行init" class="headerlink" title="运行init"></a>运行init</h2><p>&ensp;&ensp;&ensp;&ensp;init 进程是系统所有进程的起点，你可以把它比拟成系统所有进程的老祖宗，没有这个进程，系统中任何进程都不会启动。init 程序首先是需要读取配置文件 /etc/inittab（定义了系统默认运行级别），根据该配置文件设定的脚本执行。</p><pre><code># System initialization.si::sysinit:/etc/rc.d/rc.sysinitl0:0:wait:/etc/rc.d/rc 0l1:1:wait:/etc/rc.d/rc 1l2:2:wait:/etc/rc.d/rc 2l3:3:wait:/etc/rc.d/rc 3l4:4:wait:/etc/rc.d/rc 4###当运行级别为5时，以5为参数运行/etc/rc.d/rc脚本，init将等待其返回(wait)l5:5:wait:/etc/rc.d/rc 5l6:6:wait:/etc/rc.d/rc 6###在启动过程中允许按CTRL-ALT-DELETE重启系统# Trap CTRL-ALT-DELETEca::ctrlaltdel:/sbin/shutdown -t3 -r now# When our UPS tells us power has failed, assume we have a few minutes# of power left.　Schedule a shutdown for 2 minutes from now.# This does, of course, assume you have powerd installed and your# UPS connected and working correctly.pf::powerfail:/sbin/shutdown -f -h +2 &quot;Power Failure; System Shutting Down&quot;# If power was restored before the shutdown kicked in, cancel it.pr:12345:powerokwait:/sbin/shutdown -c &quot;Power Restored; Shutdown Cancelled&quot;###在2、3、4、5级别上以ttyX为参数执行/sbin/mingetty程序，打开ttyX终端用于用户登录，###如果进程退出则再次运行mingetty程序(respawn)# Run gettys in standard runlevels1:2345:respawn:/sbin/mingetty tty12:2345:respawn:/sbin/mingetty tty23:2345:respawn:/sbin/mingetty tty34:2345:respawn:/sbin/mingetty tty45:2345:respawn:/sbin/mingetty tty56:2345:respawn:/sbin/mingetty tty6###在5级别上运行xdm程序，提供xdm图形方式登录界面，并在退出时重新执行(respawn)# Run xdm in runlevel 5x:5:respawn:/etc/X11/prefdm -nodaemon</code></pre><h2 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h2><p><img src="/2018/10/15/Linux系统启动过程/imag2.jpg" alt=""></p><p>&ensp;&ensp;&ensp;&ensp;其中，第一个被执行的脚本为/etc/rc.d/rc.sysinit，这个是真正的OS初始化脚本，简单讲下这个脚本的任务：</p><ol><li>激活udev和selinux；</li><li>根据/etc/sysctl.conf文件，来设定内核参数；</li><li>设定系统时钟；</li><li>装载硬盘映射；</li><li>启用交换分区；</li><li>设置主机名；</li><li>根文件系统检测，并以读写方式重新挂载根文件系统；</li><li>激活RAID和LVM设备；</li><li>启用磁盘配额；</li><li>根据/etc/fstab，检查并挂载其他文件系统；</li><li>清理过期的锁和PID文件</li></ol><p>&ensp;&ensp;&ensp;&ensp;在rc.sysinit执行后，将返回init继续其它的动作，通常接下来会执行到/etc/rc.d/rc程序。以运行级别5为例，init将执行配置文件inittab中的以下这行：</p><pre><code>l5:5:wait:/etc/rc.d/rc 5 </code></pre><p>&ensp;&ensp;&ensp;&ensp;这一行表示以5为参数运行/etc/rc.d/rc，/etc/rc.d/rc是一个Shell脚本，它接受5作为参数，去执行/etc/rc.d/rc5.d/目录下的所有的rc启动脚本，/etc/rc.d/rc5.d/目录中的这些启动脚本实际上都是一些连接文件，而不是真正的rc启动脚本，真正的rc启动脚本实际上都是放在/etc/rc.d/init.d/目录下。而这些rc启动脚本有着类似的用法，它们一般能接受start、stop、restart、status等参数。<br>&ensp;&ensp;&ensp;&ensp;/etc/rc.d/rc5.d/中的rc启动脚本通常是K或S开头的连接文件，对于以 S 开头的启动脚本，将以start参数来运行。而如果发现存在相应的脚本也存在K打头的连接，而且已经处于运行态了(以/var/lock/subsys/下的文件作为标志)，则将首先以stop为参数停止这些已经启动了的守护进程，然后再重新运行。<br>&ensp;&ensp;&ensp;&ensp;这样做是为了保证是当init改变运行级别时，所有相关的守护进程都将重启。至于在每个运行级中将运行哪些守护进程，用户可以通过chkconfig或setup中的”System Services”来自行设定。</p><p>（补充知识点：运行级别）</p><h4 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h4><p>&ensp;&ensp;&ensp;&ensp;许多程序需要开机启动。它们在Windows叫做”服务”（service），在Linux就叫做”守护进程”（daemon）。init进程的一大任务，就是去运行这些开机启动的程序。但是，不同的场合需要启动不同的程序，比如用作服务器时，需要启动Apache，用作桌面就不需要。<br>&ensp;&ensp;&ensp;&ensp;Linux允许为不同的场合，分配不同的开机启动程序，这就叫做”运行级别”（runlevel）。也就是说，启动时根据”运行级别”，确定要运行哪些程序。</p><p>Linux系统有7个运行级别(runlevel)：</p><pre><code>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆运行级别2：多用户状态(没有NFS)运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式运行级别4：系统未使用，保留运行级别5：X11控制台，登陆后进入图形GUI模式运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启</code></pre><p>&ensp;&ensp;&ensp;&ensp;这些级别中1、2、4运行级别很少用，相对而言0、3、5、6运行级别用的会较多。3和5运行级别除了桌面相关的进程外没有什么区别。为了减少资源占用，推荐都用3级别。</p><h2 id="建立终端"><a href="#建立终端" class="headerlink" title="建立终端"></a>建立终端</h2><p>&ensp;&ensp;&ensp;&ensp;rc执行完毕后，返回init。这时基本系统环境已经设置好了，各种守护进程也已经启动了。init接下来会打开6个终端，以便用户登录系统。通过按Alt+Fn(n对应1-6)可以在这6个终端中切换。在inittab中的以下6行就是定义了6个终端：</p><pre><code># Run gettys in standard runlevels1:2345:respawn:/sbin/mingetty tty12:2345:respawn:/sbin/mingetty tty23:2345:respawn:/sbin/mingetty tty34:2345:respawn:/sbin/mingetty tty45:2345:respawn:/sbin/mingetty tty56:2345:respawn:/sbin/mingetty tty6</code></pre><p>&ensp;&ensp;&ensp;从上面可以看出在2、3、4、5的运行级别中都将以respawn方式运行mingetty程序，mingetty程序能打开终端、设置模式。同时它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验证用户的身份。</p><h2 id="用户登录系统"><a href="#用户登录系统" class="headerlink" title="用户登录系统"></a>用户登录系统</h2><p>一般来说，用户的登录方式有三种：</p><pre><code>（1）命令行登录（2）ssh登录（3）图形界面登录</code></pre><p><img src="http://www.runoob.com/wp-content/uploads/2014/06/bg2013081706.png" alt=""></p><p>&ensp;&ensp;&ensp;&ensp;对于运行级别为5的图形方式用户来说，他们的登录是通过一个图形化的登录界面。登录成功后可以直接进入 KDE、Gnome 等窗口管理器。而本文主要讲的还是文本方式登录的情况：当我们看到mingetty的登录界面时，我们就可以输入用户名和密码来登录系统了。<br>&ensp;&ensp;&ensp;&ensp;Linux 的账号验证程序是 login，login 会接收 mingetty 传来的用户名作为用户名参数。然后 login 会对用户名进行分析：如果用户名不是 root，且存在 /etc/nologin 文件，login 将输出 nologin 文件的内容，然后退出。这通常用来系统维护时防止非root用户登录。只有/etc/securetty中登记了的终端才允许 root 用户登录，如果不存在这个文件，则 root 用户可以在任何终端上登录。/etc/usertty文件用于对用户作出附加访问限制，如果不存在这个文件，则没有其他限制。</p><h2 id="参考、推荐"><a href="#参考、推荐" class="headerlink" title="参考、推荐"></a>参考、推荐</h2><p>参考文章：</p><p>[1]:[6 Stages of Linux Boot Process (Startup Sequence)]<a href="https://www.thegeekstuff.com/2011/02/linux-boot-process/" target="_blank" rel="noopener">https://www.thegeekstuff.com/2011/02/linux-boot-process/</a><br>[2]:[Linux 系统启动过程]<a href="http://www.runoob.com/linux/linux-system-boot.html" target="_blank" rel="noopener">http://www.runoob.com/linux/linux-system-boot.html</a><br>[3]:[linux中inittab文件详解]<a href="https://blog.csdn.net/pengrui18/article/details/49757451" target="_blank" rel="noopener">https://blog.csdn.net/pengrui18/article/details/49757451</a> <br></p><p>推荐：</p><p>&ensp;&ensp;&ensp;&ensp;Linux系统启动这个看似很小的部分里面包含了非常多的内容，本文也只是我在学习Linux系统时，查资料总结的笔记，只是介绍了很少的一部分内容，推荐大家去深入了解，比如守护进程的创建、fork函数的应用、Linux VFS文件系统机制等等。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;Linux系统的启动过程大概可以分成以以下五个阶段：（本文章以CentOS 7之前的版本为例讲解，CentOS 7开始之后的版本使用systemd来代替centos6以前的init程序，详细区别可见&lt;a href=&quot;https://blog.csdn.net/qq_27754983/article/details/75212666&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CentOS 6 和 CentOS 7 系统启动对比&lt;/a&gt; )&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内核引导&lt;/li&gt;
&lt;li&gt;运行init&lt;/li&gt;
&lt;li&gt;系统初始化&lt;/li&gt;
&lt;li&gt;建立终端&lt;/li&gt;
&lt;li&gt;用户登录系统&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="Linux系统" scheme="https://ccttry.github.io/categories/Linux%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Linux" scheme="https://ccttry.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>seconPage</title>
    <link href="https://ccttry.github.io/2018/10/03/seconTest/"/>
    <id>https://ccttry.github.io/2018/10/03/seconTest/</id>
    <published>2018-10-03T01:46:27.000Z</published>
    <updated>2018-10-03T02:07:23.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="this-is-second-page"><a href="#this-is-second-page" class="headerlink" title="this is second page"></a>this is second page</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;this-is-second-page&quot;&gt;&lt;a href=&quot;#this-is-second-page&quot; class=&quot;headerlink&quot; title=&quot;this is second page&quot;&gt;&lt;/a&gt;this is second page&lt;/h1&gt;
      
    
    </summary>
    
      <category term="Ubuntu系统" scheme="https://ccttry.github.io/categories/Ubuntu%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="ubuntu" scheme="https://ccttry.github.io/tags/ubuntu/"/>
    
      <category term="测试" scheme="https://ccttry.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="second" scheme="https://ccttry.github.io/tags/second/"/>
    
  </entry>
  
  <entry>
    <title>南京微凉</title>
    <link href="https://ccttry.github.io/2018/10/02/firstpage/"/>
    <id>https://ccttry.github.io/2018/10/02/firstpage/</id>
    <published>2018-10-02T15:29:20.000Z</published>
    <updated>2018-10-03T08:36:33.692Z</updated>
    
    <content type="html"><![CDATA[<h2 id="记开博第一篇"><a href="#记开博第一篇" class="headerlink" title="记开博第一篇"></a>记开博第一篇<br></h2><p>&#160; &#160; 中秋过后的南京，天已开始转凉。早起穿着一件短袖就显得单薄，晚自习回去的时候，冻得瑟瑟发抖…秋风一吹起来，人总是会容易感伤。<br><a id="more"></a>“古道西风瘦马断肠人在天涯”。想念高中的老师们，温文尔雅；更想念高中的同学们，怀念那些年在一起奋斗的日子；怀念当时我们晚自习下课后，一起去锻炼的热情；怀念娥姐一直孜孜不倦告诫我们的那句话：“他他他他他，…风云人物~…”可是回忆回不去，再美好也回不去了。最近赶上保研报名的时间了，朋友圈和空间里晒满了同学们的录取通知，大家都很厉害，大多都有了一个好的去处。</p><h4 id="只愿天涯再相遇，你我仍相识"><a href="#只愿天涯再相遇，你我仍相识" class="headerlink" title="只愿天涯再相遇，你我仍相识"></a>只愿天涯再相遇，你我仍相识</h4><p>&#160; &#160;我一直害怕自己堕落了，消极生活，将来和你们在一起相聚之时，跟不上你们的话题，那将是多么的可悲。现在已经是大四了，这些日子以来，生活已经步入了新的一个阶段，<br>&#160; &#160;我发现自己有好多事情想做，好多事情要做，好多事情还没有做。好多事情，怕是自己一口气也做不了，索性就一件一件事情来，第一件就是从写博客开始，记录下自己的所学所感。</p><h4 id="Dreams-are-hard-to-follow-but-don’t-let-anyone-tear-them-away"><a href="#Dreams-are-hard-to-follow-but-don’t-let-anyone-tear-them-away" class="headerlink" title="Dreams are hard  to follow ,but don’t let anyone tear them away."></a>Dreams are hard  to follow ,but don’t let anyone tear them away.</h4>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;记开博第一篇&quot;&gt;&lt;a href=&quot;#记开博第一篇&quot; class=&quot;headerlink&quot; title=&quot;记开博第一篇&quot;&gt;&lt;/a&gt;记开博第一篇&lt;br&gt;&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; 中秋过后的南京，天已开始转凉。早起穿着一件短袖就显得单薄，晚自习回去的时候，冻得瑟瑟发抖…秋风一吹起来，人总是会容易感伤。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="随记" scheme="https://ccttry.github.io/categories/%E9%9A%8F%E8%AE%B0/"/>
    
    
      <category term="发牢骚" scheme="https://ccttry.github.io/tags/%E5%8F%91%E7%89%A2%E9%AA%9A/"/>
    
  </entry>
  
</feed>
